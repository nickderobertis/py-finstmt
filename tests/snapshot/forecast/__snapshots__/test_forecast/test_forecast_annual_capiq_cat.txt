'''
finstmt.forecast.statements.ForecastedFinancialStatements(
    income_statements=finstmt.inc.main.IncomeStatements(
        statements={
            datetime.datetime(
                2019,
                12,
                31
            ): finstmt.inc.data.IncomeStatementData(
                revenue=numpy.float64(5463.0),
                cogs=numpy.float64(3626.0),
                sga=numpy.float64(461.0),
                int_exp=numpy.float64(9.0),
                tax_exp=numpy.float64(708.0),
                rd_exp=numpy.float64(166.0),
                other_op_exp=numpy.float64(5.0),
                gain_on_sale_invest=numpy.float64(8.0),
                impairment=numpy.float64(12.0),
                op_exp=numpy.float64(633.0),
                ebit=numpy.float64(1205.0),
                ebt=numpy.float64(1195.0),
                net_income=numpy.float64(488.0)
            ),
            datetime.datetime(
                2020,
                12,
                31
            ): finstmt.inc.data.IncomeStatementData(
                revenue=numpy.float64(5454.0),
                cogs=numpy.float64(3538.0),
                sga=numpy.float64(443.0),
                int_exp=numpy.float64(9.0),
                tax_exp=numpy.float64(784.0),
                rd_exp=numpy.float64(135.0),
                other_op_exp=numpy.float64(5.0),
                gain_on_sale_invest=numpy.float64(8.0),
                impairment=numpy.float64(12.0),
                op_exp=numpy.float64(583.0),
                ebit=numpy.float64(1333.0),
                ebt=numpy.float64(1324.0),
                net_income=numpy.float64(540.0)
            )
        }
    ),
    balance_sheets=finstmt.bs.main.BalanceSheets(
        statements={
            datetime.datetime(
                2019,
                12,
                31
            ): finstmt.bs.data.BalanceSheetData(
                cash=numpy.float64(1046.0),
                receivables=numpy.float64(827.0),
                inventory=numpy.float64(1171.0),
                def_tax_st=numpy.float64(33.0),
                other_current_assets=numpy.float64(3.0),
                gross_ppe=numpy.float64(3136.0),
                dep=numpy.float64(1622.0),
                goodwill=numpy.float64(634.0),
                def_tax_lt=numpy.float64(138.0),
                other_lt_assets=numpy.float64(117.0),
                payables=numpy.float64(767.0),
                current_lt_debt=numpy.float64(6.0),
                lt_debt=numpy.float64(722.0),
                tax_liab_st=numpy.float64(8.0),
                other_current_liab=numpy.float64(350.0),
                tax_liab_lt=numpy.float64(8.0),
                other_lt_liab=numpy.float64(324.0),
                common_stock=numpy.float64(598.0),
                minority_interest=numpy.float64(7.0),
                other_income=numpy.float64(42.0),
                retained_earnings=numpy.float64(2649.0),
                cash_and_st_invest=numpy.float64(1046.0),
                total_current_assets=numpy.float64(3079.0),
                net_ppe=numpy.float64(1514.0),
                total_non_current_assets=numpy.float64(2403.0),
                total_assets=numpy.float64(5482.0),
                total_current_liab=numpy.float64(1131.0),
                total_debt=numpy.float64(722.0),
                total_non_current_liab=numpy.float64(1054.0),
                total_liab=numpy.float64(2186.0),
                total_equity=numpy.float64(3296.0),
                total_liab_and_equity=numpy.float64(5482.0)
            ),
            datetime.datetime(
                2020,
                12,
                31
            ): finstmt.bs.data.BalanceSheetData(
                cash=numpy.float64(1074.0),
                receivables=numpy.float64(825.0),
                inventory=numpy.float64(1165.0),
                def_tax_st=numpy.float64(33.0),
                other_current_assets=numpy.float64(3.0),
                gross_ppe=numpy.float64(3136.0),
                dep=numpy.float64(1622.0),
                goodwill=numpy.float64(634.0),
                def_tax_lt=numpy.float64(140.0),
                other_lt_assets=numpy.float64(117.0),
                payables=numpy.float64(797.0),
                current_lt_debt=numpy.float64(6.0),
                lt_debt=numpy.float64(691.0),
                tax_liab_st=numpy.float64(8.0),
                other_current_liab=numpy.float64(350.0),
                tax_liab_lt=numpy.float64(8.0),
                other_lt_liab=numpy.float64(324.0),
                common_stock=numpy.float64(618.0),
                minority_interest=numpy.float64(7.0),
                other_income=numpy.float64(146.0),
                retained_earnings=numpy.float64(2550.0),
                cash_and_st_invest=numpy.float64(1074.0),
                total_current_assets=numpy.float64(3100.0),
                net_ppe=numpy.float64(1514.0),
                total_non_current_assets=numpy.float64(2405.0),
                total_assets=numpy.float64(5505.0),
                total_current_liab=numpy.float64(1161.0),
                total_debt=numpy.float64(691.0),
                total_non_current_liab=numpy.float64(1023.0),
                total_liab=numpy.float64(2184.0),
                total_equity=numpy.float64(3321.0),
                total_liab_and_equity=numpy.float64(5505.0)
            )
        }
    ),
    calculate=False,
    forecasts={
        'revenue': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31    55184.0
2015-12-31    47011.0
2016-12-31    38537.0
2017-12-31    45462.0
2018-12-31    54722.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(),
            base_config=finstmt.items.config.ItemConfig(
                key='revenue',
                display_name='Revenue',
                extract_names=[
                    'total revenue',
                    'total rev',
                    'total sales',
                    'total sale',
                    'revenue',
                    'rev',
                    'sales',
                    'sale'
                ]
            )
        ),
        'cogs': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31    40718.0
2015-12-31    33546.0
2016-12-31    28044.0
2017-12-31    31260.0
2018-12-31    36997.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='trend',
                pct_of='revenue'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='cogs',
                display_name='Cost of Goods Sold',
                extract_names=[
                    'cost of revenue',
                    'cost of goods sold',
                    'cogs',
                    'cor'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='trend',
                    pct_of='revenue'
                )
            ),
            pct_of_series=2014-12-31    55184.0
2015-12-31    47011.0
2016-12-31    38537.0
2017-12-31    45462.0
2018-12-31    54722.0
dtype: float64,
            pct_of_config=finstmt.items.config.ItemConfig(
                key='revenue',
                display_name='Revenue',
                extract_names=[
                    'total revenue',
                    'total rev',
                    'total sales',
                    'total sale',
                    'revenue',
                    'rev',
                    'sales',
                    'sale'
                ]
            )
        ),
        'rd_exp': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31    2380.0
2015-12-31    2119.0
2016-12-31    1853.0
2017-12-31    1842.0
2018-12-31    1850.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='auto'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='rd_exp',
                display_name='R&D Expense',
                extract_names=[
                    'rd expenses',
                    'rd expense',
                    'rd exp',
                    'rd',
                    'research and development expenses',
                    'research and development expense',
                    'research and development exp',
                    'research and development'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='auto'
                )
            )
        ),
        'sga': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31    5894.0
2015-12-31    4363.0
2016-12-31    4476.0
2017-12-31    4425.0
2018-12-31    4806.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(),
            base_config=finstmt.items.config.ItemConfig(
                key='sga',
                display_name='SG&A Expense',
                extract_names=[
                    'sga',
                    'sga expense',
                    'sga expenses',
                    'sga exp',
                    'selling general and administrative',
                    'selling general and administrative expense',
                    'selling general and administrative expenses',
                    'selling general and administrative exp',
                    'selling general administrative',
                    'selling general administrative expense',
                    'selling general administrative expenses',
                    'selling general administrative exp',
                    'selling general and admin',
                    'selling general and admin expense',
                    'selling general and admin expenses',
                    'selling general and admin exp',
                    'selling general admin',
                    'selling general admin expense',
                    'selling general admin expenses',
                    'selling general admin exp'
                ]
            )
        ),
        'other_op_exp': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31    44.0
2015-12-31    27.0
2016-12-31    78.0
2017-12-31    19.0
2018-12-31    89.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='mean'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='other_op_exp',
                display_name='Other Operating Expenses',
                extract_names=[
                    'other operating expenses',
                    'other operating expense',
                    'other operating exp',
                    'other op expenses',
                    'other op expense',
                    'other op exp',
                    'other operating expensesincome',
                    'other operating expenseincome',
                    'other operating expincome',
                    'other op expensesincome',
                    'other op expenseincome',
                    'other op expincome',
                    'other operating expenses income',
                    'other operating expense income',
                    'other operating exp income',
                    'other op expenses income',
                    'other op expense income',
                    'other op exp income',
                    'other operating expensesinc',
                    'other operating expenseinc',
                    'other operating expinc',
                    'other op expensesinc',
                    'other op expenseinc',
                    'other op expinc',
                    'other operating expenses inc',
                    'other operating expense inc',
                    'other operating exp inc',
                    'other op expenses inc',
                    'other op expense inc',
                    'other op exp inc',
                    'other income expenses',
                    'other income expense',
                    'other income exps',
                    'other income exp',
                    'other inc expenses',
                    'other inc expense',
                    'other inc exps',
                    'other inc exp',
                    'other expenses income',
                    'other expense income',
                    'other exps income',
                    'other exp income',
                    'other expenses inc',
                    'other expense inc',
                    'other exps inc',
                    'other exp inc'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='mean'
                )
            )
        ),
        'int_exp': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31    484.0
2015-12-31    507.0
2016-12-31    503.0
2017-12-31    531.0
2018-12-31    404.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='mean',
                pct_of='total_debt'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='int_exp',
                display_name='Interest Expense',
                extract_names=[
                    'int',
                    'int expense',
                    'int expenses',
                    'int exp',
                    'interest',
                    'interest expense',
                    'interest expenses',
                    'interest exp'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='mean',
                    pct_of='total_debt'
                )
            ),
            pct_of_series=2014-12-31    39293.0
2015-12-31    38017.0
2016-12-31    36784.0
2017-12-31    34880.0
2018-12-31    36593.0
dtype: float64,
            pct_of_config=finstmt.items.config.ItemConfig(
                key='total_debt',
                display_name='Total Debt',
                extract_names=['total debt'],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    make_forecast=False
                ),
                expr_str='st_debt[t] + lt_debt[t]'
            )
        ),
        'gain_on_sale_invest': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31     36.0
2015-12-31    176.0
2016-12-31     47.0
2017-12-31    187.0
2018-12-31    -29.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='mean'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='gain_on_sale_invest',
                display_name='Gain on Sale of Investments',
                extract_names=[
                    'gain loss on sale of invest',
                    'gain loss sale of invest',
                    'gain loss sale invest',
                    'gain on sale of invest',
                    'gain sale of invest',
                    'gain sale invest',
                    'gain loss on sale of investments',
                    'gain loss sale of investments',
                    'gain loss sale investments',
                    'gain on sale of investments',
                    'gain sale of investments',
                    'gain sale investments'
                ],
                force_positive=False,
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='mean'
                )
            )
        ),
        'impairment': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31      0.0
2015-12-31      0.0
2016-12-31    595.0
2017-12-31      0.0
2018-12-31      0.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='mean'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='impairment',
                display_name='Impairment Expense',
                extract_names=[
                    'impairment',
                    'impairment expense',
                    'impairment exp',
                    'impairments',
                    'impair',
                    'impair expense',
                    'impair exp',
                    'impairment charges',
                    'impairment charge',
                    'impair charges',
                    'impair charge',
                    'impairment of goodwill',
                    'impairment expense of goodwill',
                    'impairment exp of goodwill',
                    'impairments of goodwill',
                    'impair of goodwill',
                    'impair expense of goodwill',
                    'impair exp of goodwill',
                    'impairment charges of goodwill',
                    'impairment charge of goodwill',
                    'impair charges of goodwill',
                    'impair charge of goodwill',
                    'impairment goodwill',
                    'impairment expense goodwill',
                    'impairment exp goodwill',
                    'impairments goodwill',
                    'impair goodwill',
                    'impair expense goodwill',
                    'impair exp goodwill',
                    'impairment charges goodwill',
                    'impairment charge goodwill',
                    'impair charges goodwill',
                    'impair charge goodwill',
                    'asset writedown',
                    'assets writedown',
                    'asset write down',
                    'assets write down'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='mean'
                )
            )
        ),
        'tax_exp': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31     692.0
2015-12-31     916.0
2016-12-31     192.0
2017-12-31    3339.0
2018-12-31    1698.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='mean',
                pct_of='ebt'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='tax_exp',
                display_name='Income Tax Expense',
                extract_names=[
                    'taxes',
                    'tax',
                    'tax provision',
                    'tax expense',
                    'tax expenses',
                    'tax exp',
                    'income tax',
                    'income tax provision',
                    'income tax expense',
                    'income tax expenses',
                    'income tax exp'
                ],
                force_positive=False,
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='mean',
                    pct_of='ebt'
                )
            ),
            pct_of_series=2014-12-31    3160.0
2015-12-31    3439.0
2016-12-31     133.0
2017-12-31    4098.0
2018-12-31    7846.0
dtype: float64,
            pct_of_config=finstmt.items.config.ItemConfig(
                key='ebt',
                display_name='Earnings Before Tax',
                extract_names=[
                    'ebt',
                    'earnings before taxes',
                    'earnings before tax',
                    'earn before tax',
                    'earn before taxes',
                    'ebt including unusual items',
                    'earnings before taxes including unusual items',
                    'earnings before tax including unusual items',
                    'earn before tax including unusual items',
                    'earn before taxes including unusual items',
                    'ebt inc unusual items',
                    'earnings before taxes inc unusual items',
                    'earnings before tax inc unusual items',
                    'earn before tax inc unusual items',
                    'earn before taxes inc unusual items',
                    'ebt incl unusual items',
                    'earnings before taxes incl unusual items',
                    'earnings before tax incl unusual items',
                    'earn before tax incl unusual items',
                    'earn before taxes incl unusual items',
                    'pretax income',
                    'pre tax income',
                    'income pretax',
                    'income pre tax'
                ],
                force_positive=False,
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    make_forecast=False
                ),
                expr_str='ebit[t] - int_exp[t]'
            )
        ),
        'cash': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31    6317.0
2015-12-31    5340.0
2016-12-31    5257.0
2017-12-31    7381.0
2018-12-31    6968.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='manual',
                manual_forecasts={'levels': [10460, 10743], 'growth': []},
                plug=True
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='cash',
                display_name='Cash and Cash Equivalents',
                extract_names=[
                    'cash',
                    'cash and cash equivalents',
                    'cash and equivalents',
                    'cash and equiv',
                    'cash cash equivalents',
                    'cash equivalents',
                    'cash equiv'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='manual',
                    manual_forecasts={'levels': [10460, 10743], 'growth': []},
                    plug=True
                )
            )
        ),
        'receivables': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31    7699.0
2015-12-31    6677.0
2016-12-31    5919.0
2017-12-31    7376.0
2018-12-31    8714.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='mean',
                pct_of='revenue'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='receivables',
                display_name='Receivables',
                extract_names=[
                    'receivables',
                    'rec',
                    'accounts receivable',
                    'ar'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='mean',
                    pct_of='revenue'
                )
            ),
            pct_of_series=2014-12-31    55184.0
2015-12-31    47011.0
2016-12-31    38537.0
2017-12-31    45462.0
2018-12-31    54722.0
dtype: float64,
            pct_of_config=finstmt.items.config.ItemConfig(
                key='revenue',
                display_name='Revenue',
                extract_names=[
                    'total revenue',
                    'total rev',
                    'total sales',
                    'total sale',
                    'revenue',
                    'rev',
                    'sales',
                    'sale'
                ]
            )
        ),
        'inventory': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31    12205.0
2015-12-31     9700.0
2016-12-31     8614.0
2017-12-31    10018.0
2018-12-31    11529.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='trend',
                pct_of='revenue'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='inventory',
                display_name='Inventory',
                extract_names=['inv', 'inventory', 'inventories'],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='trend',
                    pct_of='revenue'
                )
            ),
            pct_of_series=2014-12-31    55184.0
2015-12-31    47011.0
2016-12-31    38537.0
2017-12-31    45462.0
2018-12-31    54722.0
dtype: float64,
            pct_of_config=finstmt.items.config.ItemConfig(
                key='revenue',
                display_name='Revenue',
                extract_names=[
                    'total revenue',
                    'total rev',
                    'total sales',
                    'total sale',
                    'revenue',
                    'rev',
                    'sales',
                    'sale'
                ]
            )
        ),
        'def_tax_st': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31    1644.0
2015-12-31       0.0
2016-12-31       0.0
2017-12-31       0.0
2018-12-31       0.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='mean'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='def_tax_st',
                display_name='Deferred Tax Assets, Current',
                extract_names=[
                    'def tax asset curr',
                    'deferred tax asset curr',
                    'tax asset curr',
                    'def tax assets curr',
                    'deferred tax assets curr',
                    'tax assets curr',
                    'def tax asset current',
                    'deferred tax asset current',
                    'tax asset current',
                    'def tax assets current',
                    'deferred tax assets current',
                    'tax assets current',
                    'def tax asset short term',
                    'deferred tax asset short term',
                    'tax asset short term',
                    'def tax assets short term',
                    'deferred tax assets short term',
                    'tax assets short term',
                    'def tax asset shortterm',
                    'deferred tax asset shortterm',
                    'tax asset shortterm',
                    'def tax assets shortterm',
                    'deferred tax assets shortterm',
                    'tax assets shortterm',
                    'def tax asset st',
                    'deferred tax asset st',
                    'tax asset st',
                    'def tax assets st',
                    'deferred tax assets st',
                    'tax assets st'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='mean'
                )
            )
        ),
        'other_current_assets': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31    27.0
2015-12-31    14.0
2016-12-31    23.0
2017-12-31    48.0
2018-12-31    19.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='mean'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='other_current_assets',
                display_name='Other Current Assets',
                extract_names=[
                    'other current assets',
                    'other current asset',
                    'other curr assets',
                    'other curr asset',
                    'oca'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='mean'
                )
            )
        ),
        'gross_ppe': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31    31572.0
2015-12-31    31977.0
2016-12-31    31940.0
2017-12-31    31538.0
2018-12-31    29781.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='mean'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='gross_ppe',
                display_name='Gross Property, Plant & Equipment',
                extract_names=[
                    'gross ppe',
                    'gross property plant equipment',
                    'gross property plant and equipment',
                    'ppe gross',
                    'property plant equipment gross',
                    'property plant and equipment gross',
                    'grs ppe',
                    'grs property plant equipment',
                    'grs property plant and equipment',
                    'ppe grs',
                    'property plant equipment grs',
                    'property plant and equipment grs'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='mean'
                )
            )
        ),
        'dep': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31    14995.0
2015-12-31    15887.0
2016-12-31    16618.0
2017-12-31    17383.0
2018-12-31    16207.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='mean'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='dep',
                display_name='Accumulated Depreciation',
                extract_names=[
                    'accumulated depreciation',
                    'depreciation',
                    'dep',
                    'accumulated dep',
                    'acc depreciation',
                    'accum depreciation',
                    'acc dep',
                    'accum dep'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='mean'
                )
            )
        ),
        'goodwill': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31    6677.0
2015-12-31    6598.0
2016-12-31    6003.0
2017-12-31    6183.0
2018-12-31    6217.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='mean'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='goodwill',
                display_name='Goodwill and Intangible Assets',
                extract_names=[
                    'goodwill',
                    'goodwill and intangible assets',
                    'goodwill and intangibles',
                    'goodwill intangible assets',
                    'goodwill intangibles',
                    'goodwill total',
                    'goodwill and intangible assets total',
                    'goodwill and intangibles total',
                    'goodwill intangible assets total',
                    'goodwill intangibles total'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='mean'
                )
            )
        ),
        'lt_invest': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31    257.0
2015-12-31    246.0
2016-12-31    249.0
2017-12-31      0.0
2018-12-31      0.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='recent'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='lt_invest',
                display_name='Long-Term Investments',
                extract_names=[
                    'lt invest',
                    'lt investments',
                    'long term invest',
                    'long term investments',
                    'longterm invest',
                    'longterm investments'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='recent'
                )
            )
        ),
        'def_tax_lt': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31    1267.0
2015-12-31    2367.0
2016-12-31    2683.0
2017-12-31    1569.0
2018-12-31    1363.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(),
            base_config=finstmt.items.config.ItemConfig(
                key='def_tax_lt',
                display_name='Deferred Tax Assets, Long-Term',
                extract_names=[
                    'def tax asset long term',
                    'deferred tax asset long term',
                    'tax asset long term',
                    'def tax assets long term',
                    'deferred tax assets long term',
                    'tax assets long term',
                    'def tax asset longterm',
                    'deferred tax asset longterm',
                    'tax asset longterm',
                    'def tax assets longterm',
                    'deferred tax assets longterm',
                    'tax assets longterm',
                    'def tax asset lt',
                    'deferred tax asset lt',
                    'tax asset lt',
                    'def tax assets lt',
                    'deferred tax assets lt',
                    'tax assets lt',
                    'def tax asset',
                    'deferred tax asset',
                    'tax asset',
                    'def tax assets',
                    'deferred tax assets',
                    'tax assets',
                    'long term assets tax deferred',
                    'lt assets tax deferred',
                    'lt assets tax def',
                    'long term assets tax def',
                    'long term assets deferred tax',
                    'lt assets deferred tax',
                    'lt assets def tax',
                    'long term assets def tax'
                ]
            )
        ),
        'other_lt_assets': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31     528.0
2015-12-31    1874.0
2016-12-31    1529.0
2017-12-31     950.0
2018-12-31     962.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='mean'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='other_lt_assets',
                display_name='Other Long-Term Assets',
                extract_names=[
                    'other lt assets',
                    'other lt asset',
                    'other longterm assets',
                    'other longterm asset',
                    'other long term assets',
                    'other long term asset',
                    'lt assets other',
                    'lt asset other',
                    'longterm assets other',
                    'longterm asset other',
                    'long term assets other',
                    'long term asset other'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='mean'
                )
            )
        ),
        'payables': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31    6515.0
2015-12-31    5023.0
2016-12-31    4614.0
2017-12-31    6487.0
2018-12-31    7051.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='trend',
                pct_of='revenue'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='payables',
                display_name='Payables',
                extract_names=[
                    'payables',
                    'accounts payable',
                    'ap',
                    'payables and accrued expenses',
                    'payables and accrued expense',
                    'payable and accrued expenses',
                    'payable and accrued expense',
                    'payables and acc expenses',
                    'payables and acc expense',
                    'payable and acc expenses',
                    'payable and acc expense',
                    'payables and accrued exps',
                    'payables and accrued exp',
                    'payable and accrued exps',
                    'payable and accrued exp',
                    'payables and acc exps',
                    'payables and acc exp',
                    'payable and acc exps',
                    'payable and acc exp'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='trend',
                    pct_of='revenue'
                )
            ),
            pct_of_series=2014-12-31    55184.0
2015-12-31    47011.0
2016-12-31    38537.0
2017-12-31    45462.0
2018-12-31    54722.0
dtype: float64,
            pct_of_config=finstmt.items.config.ItemConfig(
                key='revenue',
                display_name='Revenue',
                extract_names=[
                    'total revenue',
                    'total rev',
                    'total sales',
                    'total sale',
                    'revenue',
                    'rev',
                    'sales',
                    'sale'
                ]
            )
        ),
        'st_debt': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31      9.0
2015-12-31      9.0
2016-12-31    209.0
2017-12-31      1.0
2018-12-31      0.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                pct_of='total_debt'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='st_debt',
                display_name='Short-Term Debt',
                extract_names=[
                    'st debt',
                    'short term debt',
                    'shortterm debt',
                    'st borrow',
                    'short term borrow',
                    'shortterm borrowst borrowings',
                    'short term borrowings',
                    'shortterm borrowings'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    pct_of='total_debt'
                )
            ),
            pct_of_series=2014-12-31    39293.0
2015-12-31    38017.0
2016-12-31    36784.0
2017-12-31    34880.0
2018-12-31    36593.0
dtype: float64,
            pct_of_config=finstmt.items.config.ItemConfig(
                key='total_debt',
                display_name='Total Debt',
                extract_names=['total debt'],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    make_forecast=False
                ),
                expr_str='st_debt[t] + lt_debt[t]'
            )
        ),
        'current_lt_debt': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31    510.0
2015-12-31    517.0
2016-12-31    507.0
2017-12-31      6.0
2018-12-31     10.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='mean',
                pct_of='total_debt'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='current_lt_debt',
                display_name='Current Portion of Long-Term Debt',
                extract_names=[
                    'curr port of lt debt',
                    'curr port lt debt',
                    'current port of lt debt',
                    'current port lt debt',
                    'curr portion of lt debt',
                    'curr portion lt debt',
                    'current portion of lt debt',
                    'current portion lt debt',
                    'curr port of longterm debt',
                    'curr port longterm debt',
                    'current port of longterm debt',
                    'current port longterm debt',
                    'curr portion of longterm debt',
                    'curr portion longterm debt',
                    'current portion of longterm debt',
                    'current portion longterm debt',
                    'curr port of long term debt',
                    'curr port long term debt',
                    'current port of long term debt',
                    'current port long term debt',
                    'curr portion of long term debt',
                    'curr portion long term debt',
                    'current portion of long term debt',
                    'current portion long term debt',
                    'curr port of debt',
                    'curr port debt',
                    'current port of debt',
                    'current port debt',
                    'curr portion of debt',
                    'curr portion debt',
                    'current portion of debt',
                    'current portion debt',
                    'curr part of lt debt',
                    'curr part lt debt',
                    'current part of lt debt',
                    'current part lt debt',
                    'curr part of longterm debt',
                    'curr part longterm debt',
                    'current part of longterm debt',
                    'current part longterm debt',
                    'curr part of long term debt',
                    'curr part long term debt',
                    'current part of long term debt',
                    'current part long term debt',
                    'curr part of debt',
                    'curr part debt',
                    'current part of debt',
                    'current part debt'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='mean',
                    pct_of='total_debt'
                )
            ),
            pct_of_series=2014-12-31    39293.0
2015-12-31    38017.0
2016-12-31    36784.0
2017-12-31    34880.0
2018-12-31    36593.0
dtype: float64,
            pct_of_config=finstmt.items.config.ItemConfig(
                key='total_debt',
                display_name='Total Debt',
                extract_names=['total debt'],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    make_forecast=False
                ),
                expr_str='st_debt[t] + lt_debt[t]'
            )
        ),
        'tax_liab_st': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31    414.0
2015-12-31      0.0
2016-12-31      0.0
2017-12-31      0.0
2018-12-31      0.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='mean'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='tax_liab_st',
                display_name='Tax Liabilities, Short-Term',
                extract_names=[
                    'tax liab shortterm',
                    'tax liability shortterm',
                    'tax liabilities shortterm',
                    'tax liab short term',
                    'tax liability short term',
                    'tax liabilities short term',
                    'tax liab st',
                    'tax liability st',
                    'tax liabilities st',
                    'shortterm tax liab',
                    'shortterm tax liability',
                    'shortterm tax liabilities',
                    'short term tax liab',
                    'short term tax liability',
                    'short term tax liabilities',
                    'st tax liab',
                    'st tax liability',
                    'st tax liabilities',
                    'def tax liab shortterm',
                    'def tax liability shortterm',
                    'def tax liabilities shortterm',
                    'def tax liab short term',
                    'def tax liability short term',
                    'def tax liabilities short term',
                    'def tax liab st',
                    'def tax liability st',
                    'def tax liabilities st',
                    'def shortterm tax liab',
                    'def shortterm tax liability',
                    'def shortterm tax liabilities',
                    'def short term tax liab',
                    'def short term tax liability',
                    'def short term tax liabilities',
                    'def st tax liab',
                    'def st tax liability',
                    'def st tax liabilities',
                    'deferred tax liab shortterm',
                    'deferred tax liability shortterm',
                    'deferred tax liabilities shortterm',
                    'deferred tax liab short term',
                    'deferred tax liability short term',
                    'deferred tax liabilities short term',
                    'deferred tax liab st',
                    'deferred tax liability st',
                    'deferred tax liabilities st',
                    'deferred shortterm tax liab',
                    'deferred shortterm tax liability',
                    'deferred shortterm tax liabilities',
                    'deferred short term tax liab',
                    'deferred short term tax liability',
                    'deferred short term tax liabilities',
                    'deferred st tax liab',
                    'deferred st tax liability',
                    'deferred st tax liabilities',
                    'tax liab noncurr',
                    'tax liability noncurr',
                    'tax liabilities noncurr',
                    'tax liab non curr',
                    'tax liability non curr',
                    'tax liabilities non curr',
                    'noncurr tax liab',
                    'noncurr tax liability',
                    'noncurr tax liabilities',
                    'non curr tax liab',
                    'non curr tax liability',
                    'non curr tax liabilities',
                    'def tax liab noncurr',
                    'def tax liability noncurr',
                    'def tax liabilities noncurr',
                    'def tax liab non curr',
                    'def tax liability non curr',
                    'def tax liabilities non curr',
                    'def noncurr tax liab',
                    'def noncurr tax liability',
                    'def noncurr tax liabilities',
                    'def non curr tax liab',
                    'def non curr tax liability',
                    'def non curr tax liabilities',
                    'deferred tax liab noncurr',
                    'deferred tax liability noncurr',
                    'deferred tax liabilities noncurr',
                    'deferred tax liab non curr',
                    'deferred tax liability non curr',
                    'deferred tax liabilities non curr',
                    'deferred noncurr tax liab',
                    'deferred noncurr tax liability',
                    'deferred noncurr tax liabilities',
                    'deferred non curr tax liab',
                    'deferred non curr tax liability',
                    'deferred non curr tax liabilities',
                    'tax liab noncurrent',
                    'tax liability noncurrent',
                    'tax liabilities noncurrent',
                    'tax liab non current',
                    'tax liability non current',
                    'tax liabilities non current',
                    'noncurrent tax liab',
                    'noncurrent tax liability',
                    'noncurrent tax liabilities',
                    'non current tax liab',
                    'non current tax liability',
                    'non current tax liabilities',
                    'def tax liab noncurrent',
                    'def tax liability noncurrent',
                    'def tax liabilities noncurrent',
                    'def tax liab non current',
                    'def tax liability non current',
                    'def tax liabilities non current',
                    'def noncurrent tax liab',
                    'def noncurrent tax liability',
                    'def noncurrent tax liabilities',
                    'def non current tax liab',
                    'def non current tax liability',
                    'def non current tax liabilities',
                    'deferred tax liab noncurrent',
                    'deferred tax liability noncurrent',
                    'deferred tax liabilities noncurrent',
                    'deferred tax liab non current',
                    'deferred tax liability non current',
                    'deferred tax liabilities non current',
                    'deferred noncurrent tax liab',
                    'deferred noncurrent tax liability',
                    'deferred noncurrent tax liabilities',
                    'deferred non current tax liab',
                    'deferred non current tax liability',
                    'deferred non current tax liabilities'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='mean'
                )
            )
        ),
        'other_current_liab': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31    4004.0
2015-12-31    2955.0
2016-12-31    3377.0
2017-12-31    3424.0
2018-12-31    3735.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='mean'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='other_current_liab',
                display_name='Other Current Liabilities',
                extract_names=[
                    'other current liabilities',
                    'other current liab',
                    'other curr liabilities',
                    'other curr liab',
                    'other liabilities current',
                    'other liab current',
                    'other liabilities curr',
                    'other liab curr'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='mean'
                )
            )
        ),
        'lt_debt': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31    9408.0
2015-12-31    8883.0
2016-12-31    8368.0
2017-12-31    7492.0
2018-12-31    7549.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='manual',
                manual_forecasts={'levels': [7224, 6913], 'growth': []},
                plug=True
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='lt_debt',
                display_name='Long-Term Debt',
                extract_names=[
                    'lt debt',
                    'long term debt',
                    'longterm debt',
                    'lt borrow',
                    'long term borrow',
                    'longterm borrow',
                    'lt borrowings',
                    'long term borrowings',
                    'longterm borrowings',
                    'lt debt total',
                    'long term debt total',
                    'longterm debt total',
                    'lt borrow total',
                    'long term borrow total',
                    'longterm borrow total',
                    'lt borrowings total',
                    'long term borrowings total',
                    'longterm borrowings total'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='manual',
                    manual_forecasts={'levels': [7224, 6913], 'growth': []},
                    plug=True
                )
            )
        ),
        'tax_liab_lt': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31    414.0
2015-12-31      0.0
2016-12-31      0.0
2017-12-31      0.0
2018-12-31      0.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='mean'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='tax_liab_lt',
                display_name='Tax Liabilities, Long-Term',
                extract_names=[
                    'tax liab longterm',
                    'tax liability longterm',
                    'tax liabilities longterm',
                    'tax liab long term',
                    'tax liability long term',
                    'tax liabilities long term',
                    'tax liab lt',
                    'tax liability lt',
                    'tax liabilities lt',
                    'longterm tax liab',
                    'longterm tax liability',
                    'longterm tax liabilities',
                    'long term tax liab',
                    'long term tax liability',
                    'long term tax liabilities',
                    'lt tax liab',
                    'lt tax liability',
                    'lt tax liabilities',
                    'tax liab longterm def',
                    'tax liability longterm def',
                    'tax liabilities longterm def',
                    'tax liab long term def',
                    'tax liability long term def',
                    'tax liabilities long term def',
                    'tax liab lt def',
                    'tax liability lt def',
                    'tax liabilities lt def',
                    'longterm tax liab def',
                    'longterm tax liability def',
                    'longterm tax liabilities def',
                    'long term tax liab def',
                    'long term tax liability def',
                    'long term tax liabilities def',
                    'lt tax liab def',
                    'lt tax liability def',
                    'lt tax liabilities def',
                    'tax liab longterm deferred',
                    'tax liability longterm deferred',
                    'tax liabilities longterm deferred',
                    'tax liab long term deferred',
                    'tax liability long term deferred',
                    'tax liabilities long term deferred',
                    'tax liab lt deferred',
                    'tax liability lt deferred',
                    'tax liabilities lt deferred',
                    'longterm tax liab deferred',
                    'longterm tax liability deferred',
                    'longterm tax liabilities deferred',
                    'long term tax liab deferred',
                    'long term tax liability deferred',
                    'long term tax liabilities deferred',
                    'lt tax liab deferred',
                    'lt tax liability deferred',
                    'lt tax liabilities deferred',
                    'def tax liab longterm',
                    'def tax liability longterm',
                    'def tax liabilities longterm',
                    'def tax liab long term',
                    'def tax liability long term',
                    'def tax liabilities long term',
                    'def tax liab lt',
                    'def tax liability lt',
                    'def tax liabilities lt',
                    'def longterm tax liab',
                    'def longterm tax liability',
                    'def longterm tax liabilities',
                    'def long term tax liab',
                    'def long term tax liability',
                    'def long term tax liabilities',
                    'def lt tax liab',
                    'def lt tax liability',
                    'def lt tax liabilities',
                    'deferred tax liab longterm',
                    'deferred tax liability longterm',
                    'deferred tax liabilities longterm',
                    'deferred tax liab long term',
                    'deferred tax liability long term',
                    'deferred tax liabilities long term',
                    'deferred tax liab lt',
                    'deferred tax liability lt',
                    'deferred tax liabilities lt',
                    'deferred longterm tax liab',
                    'deferred longterm tax liability',
                    'deferred longterm tax liabilities',
                    'deferred long term tax liab',
                    'deferred long term tax liability',
                    'deferred long term tax liabilities',
                    'deferred lt tax liab',
                    'deferred lt tax liability',
                    'deferred lt tax liabilities',
                    'tax liab noncurrent',
                    'tax liability noncurrent',
                    'tax liabilities noncurrent',
                    'noncurrent tax liab',
                    'noncurrent tax liability',
                    'noncurrent tax liabilities',
                    'def tax liab noncurrent',
                    'def tax liability noncurrent',
                    'def tax liabilities noncurrent',
                    'def noncurrent tax liab',
                    'def noncurrent tax liability',
                    'def noncurrent tax liabilities',
                    'deferred tax liab noncurrent',
                    'deferred tax liability noncurrent',
                    'deferred tax liabilities noncurrent',
                    'deferred noncurrent tax liab',
                    'deferred noncurrent tax liability',
                    'deferred noncurrent tax liabilities',
                    'tax liab noncurr',
                    'tax liability noncurr',
                    'tax liabilities noncurr',
                    'noncurr tax liab',
                    'noncurr tax liability',
                    'noncurr tax liabilities',
                    'def tax liab noncurr',
                    'def tax liability noncurr',
                    'def tax liabilities noncurr',
                    'def noncurr tax liab',
                    'def noncurr tax liability',
                    'def noncurr tax liabilities',
                    'deferred tax liab noncurr',
                    'deferred tax liability noncurr',
                    'deferred tax liabilities noncurr',
                    'deferred noncurr tax liab',
                    'deferred noncurr tax liability',
                    'deferred noncurr tax liabilities',
                    'tax liab non current',
                    'tax liability non current',
                    'tax liabilities non current',
                    'non current tax liab',
                    'non current tax liability',
                    'non current tax liabilities',
                    'def tax liab non current',
                    'def tax liability non current',
                    'def tax liabilities non current',
                    'def non current tax liab',
                    'def non current tax liability',
                    'def non current tax liabilities',
                    'deferred tax liab non current',
                    'deferred tax liability non current',
                    'deferred tax liabilities non current',
                    'deferred non current tax liab',
                    'deferred non current tax liability',
                    'deferred non current tax liabilities',
                    'tax liab non curr',
                    'tax liability non curr',
                    'tax liabilities non curr',
                    'non curr tax liab',
                    'non curr tax liability',
                    'non curr tax liabilities',
                    'def tax liab non curr',
                    'def tax liability non curr',
                    'def tax liabilities non curr',
                    'def non curr tax liab',
                    'def non curr tax liability',
                    'def non curr tax liabilities',
                    'deferred tax liab non curr',
                    'deferred tax liability non curr',
                    'deferred tax liabilities non curr',
                    'deferred non curr tax liab',
                    'deferred non curr tax liability',
                    'deferred non curr tax liabilities',
                    'tax liab',
                    'tax liability',
                    'tax liabilities'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='mean'
                )
            )
        ),
        'other_lt_liab': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31    2817.0
2015-12-31    3203.0
2016-12-31    3184.0
2017-12-31    3657.0
2018-12-31    3319.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='mean'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='other_lt_liab',
                display_name='Other Long-Term Liabilities',
                extract_names=[
                    'other lt liabilities',
                    'other longterm liabilities',
                    'other long term liabilities',
                    'other lt liab',
                    'other longterm liab',
                    'other long term liab',
                    'other noncurrent liabilities',
                    'other non current liabilities',
                    'other noncurr liabilities',
                    'other non curr liabilities',
                    'other noncurrent liab',
                    'other non current liab',
                    'other noncurr liab',
                    'other non curr liab',
                    'other liabilities lt',
                    'other liabilities longterm',
                    'other liabilities long term',
                    'other liab lt',
                    'other liab longterm',
                    'other liab long term',
                    'other liabilities noncurrent',
                    'other liabilities non current',
                    'other liabilities noncurr',
                    'other liabilities non curr',
                    'other liab noncurrent',
                    'other liab non current',
                    'other liab noncurr',
                    'other liab non curr',
                    'lt liabilities other',
                    'longterm liabilities other',
                    'long term liabilities other',
                    'lt liab other',
                    'longterm liab other',
                    'long term liab other',
                    'noncurrent liabilities other',
                    'non current liabilities other',
                    'noncurr liabilities other',
                    'non curr liabilities other',
                    'noncurrent liab other',
                    'non current liab other',
                    'noncurr liab other',
                    'non curr liab other',
                    'liabilities lt other',
                    'liabilities longterm other',
                    'liabilities long term other',
                    'liab lt other',
                    'liab longterm other',
                    'liab long term other',
                    'liabilities noncurrent other',
                    'liabilities non current other',
                    'liabilities noncurr other',
                    'liabilities non curr other',
                    'liab noncurrent other',
                    'liab non current other',
                    'liab noncurr other',
                    'liab non curr other'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='mean'
                )
            )
        ),
        'common_stock': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31    5016.0
2015-12-31    5238.0
2016-12-31    5277.0
2017-12-31    5593.0
2018-12-31    5827.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='trend'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='common_stock',
                display_name='Common Stock',
                extract_names=[
                    'total common stock',
                    'total stock',
                    'total common shares',
                    'total shares',
                    'common stock',
                    'stockcommon shares',
                    'shares',
                    'net total common stock',
                    'net total stock',
                    'net total common shares',
                    'net total shares',
                    'net common stock',
                    'net stocknet common shares',
                    'net shares',
                    'total common stock net',
                    'total stock net',
                    'total common shares net',
                    'total shares net',
                    'common stock net',
                    'stock netcommon shares net',
                    'shares net'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='trend'
                )
            )
        ),
        'other_income': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31   -6431.0
2015-12-31   -2035.0
2016-12-31   -2039.0
2017-12-31   -1192.0
2018-12-31   -1684.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='trend'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='other_income',
                display_name='Other Comprehensive Income',
                extract_names=[
                    'other income',
                    'other comprehensive income',
                    'other comp income',
                    'comp income',
                    'comprehensive income',
                    'comprehensive income and other',
                    'comp income and other',
                    'comp inc and other',
                    'comprehensive inc and other',
                    'comprehensive income other',
                    'comp income other',
                    'comp inc other',
                    'comprehensive inc other'
                ],
                force_positive=False,
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='trend'
                )
            )
        ),
        'retained_earnings': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31    33887.0
2015-12-31    29246.0
2016-12-31    27377.0
2017-12-31    26301.0
2018-12-31    30427.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='trend'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='retained_earnings',
                display_name='Retained Earnings',
                extract_names=[
                    're',
                    'retained earnings',
                    'retained earnings deficit',
                    're deficit'
                ],
                force_positive=False,
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='trend'
                )
            )
        ),
        'minority_interest': finstmt.forecast.main.Forecast(
            orig_series=2014-12-31    80.0
2015-12-31    76.0
2016-12-31    76.0
2017-12-31    69.0
2018-12-31    41.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC'
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='mean'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='minority_interest',
                display_name='Minority Interest',
                extract_names=[
                    'minority interest',
                    'minority int',
                    'min int',
                    'min interest'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='mean'
                )
            )
        )
    }
)
'''