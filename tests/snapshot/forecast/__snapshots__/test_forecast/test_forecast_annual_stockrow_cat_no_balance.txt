'''
finstmt.forecast.statements.ForecastedFinancialStatements(
    income_statements=finstmt.inc.main.IncomeStatements(
        statements={
            datetime.datetime(
                2019,
                12,
                31
            ): finstmt.inc.data.IncomeStatementData(
                revenue=numpy.float64(5766722044.0),
                cogs=numpy.float64(4045463906.0),
                sga=numpy.float64(570577284.0),
                int_exp=numpy.float64(46517415.0),
                tax_exp=numpy.float64(330811912.0),
                rd_exp=numpy.float64(213050418.0),
                op_exp=numpy.float64(783627702.0),
                ebit=numpy.float64(937630436.0),
                ebt=numpy.float64(891113021.0),
                net_income=numpy.float64(560301110.0)
            ),
            datetime.datetime(
                2020,
                12,
                31
            ): finstmt.inc.data.IncomeStatementData(
                revenue=numpy.float64(6077095707.0),
                cogs=numpy.float64(4229165326.0),
                sga=numpy.float64(594301638.0),
                int_exp=numpy.float64(47196019.0),
                tax_exp=numpy.float64(374593992.0),
                rd_exp=numpy.float64(197383256.0),
                op_exp=numpy.float64(791684894.0),
                ebit=numpy.float64(1056245488.0),
                ebt=numpy.float64(1009049468.0),
                net_income=numpy.float64(634455477.0)
            )
        }
    ),
    balance_sheets=finstmt.bs.main.BalanceSheets(
        statements={
            datetime.datetime(
                2019,
                12,
                31
            ): finstmt.bs.data.BalanceSheetData(
                cash=numpy.float64(882800000.0),
                receivables=numpy.float64(3691328813.0),
                inventory=numpy.float64(1256051969.0),
                goodwill=numpy.float64(831110000.0),
                def_tax_lt=numpy.float64(130145039.0),
                payables=numpy.float64(750492622.0),
                st_debt=numpy.float64(1174681215.0),
                lt_debt=numpy.float64(2533931257.0),
                deposit_liab=numpy.float64(172120000.0),
                other_income=numpy.float64(-168400000.0),
                retained_earnings=numpy.float64(3225473333.0),
                cash_and_st_invest=numpy.float64(882800000.0),
                total_current_assets=numpy.float64(5830180782.0),
                net_ppe=numpy.float64(1369889452.0),
                total_non_current_assets=numpy.float64(2331144491.0),
                total_assets=numpy.float64(8161325274.0),
                total_current_liab=numpy.float64(1925173837.0),
                total_debt=numpy.float64(3708612472.0),
                total_non_current_liab=numpy.float64(2706051257.0),
                total_liab=numpy.float64(4631225094.0),
                total_equity=numpy.float64(3057073333.0),
                total_liab_and_equity=numpy.float64(7688298427.0)
            ),
            datetime.datetime(
                2020,
                12,
                31
            ): finstmt.bs.data.BalanceSheetData(
                cash=numpy.float64(933901818.0),
                receivables=numpy.float64(3890001688.0),
                inventory=numpy.float64(1320329799.0),
                goodwill=numpy.float64(831110000.0),
                def_tax_lt=numpy.float64(117704873.0),
                payables=numpy.float64(801853501.0),
                st_debt=numpy.float64(1194391339.0),
                lt_debt=numpy.float64(2568323045.0),
                deposit_liab=numpy.float64(172120000.0),
                other_income=numpy.float64(-168400000.0),
                retained_earnings=numpy.float64(3311988485.0),
                cash_and_st_invest=numpy.float64(933901818.0),
                total_current_assets=numpy.float64(6144233305.0),
                net_ppe=numpy.float64(1382493820.0),
                total_non_current_assets=numpy.float64(2331308693.0),
                total_assets=numpy.float64(8475541999.0),
                total_current_liab=numpy.float64(1996244840.0),
                total_debt=numpy.float64(3762714385.0),
                total_non_current_liab=numpy.float64(2740443045.0),
                total_liab=numpy.float64(4736687885.0),
                total_equity=numpy.float64(3143588485.0),
                total_liab_and_equity=numpy.float64(7880276370.0)
            )
        }
    ),
    calculate={
        'revenue': finstmt.forecast.main.Forecast(
            orig_series=2009-12-31    3.239600e+10
2010-12-31    4.258800e+10
2011-12-31    6.013800e+10
2012-12-31    6.587500e+10
2013-12-31    5.565600e+10
2014-12-31    5.518400e+10
2015-12-31    4.701100e+10
2016-12-31    3.853700e+10
2017-12-31    4.546200e+10
2018-12-31    5.472200e+10
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC',
                balance=False
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(),
            base_config=finstmt.items.config.ItemConfig(
                key='revenue',
                display_name='Revenue',
                extract_names=[
                    'total revenue',
                    'total rev',
                    'total sales',
                    'total sale',
                    'revenue',
                    'rev',
                    'sales',
                    'sale'
                ]
            )
        ),
        'cogs': finstmt.forecast.main.Forecast(
            orig_series=2009-12-31    2.493100e+10
2010-12-31    3.128100e+10
2011-12-31    4.440400e+10
2012-12-31    4.785200e+10
2013-12-31    4.145400e+10
2014-12-31    4.134200e+10
2015-12-31    3.413300e+10
2016-12-31    2.864000e+10
2017-12-31    3.190600e+10
2018-12-31    3.771900e+10
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC',
                balance=False
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='trend',
                pct_of='revenue'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='cogs',
                display_name='Cost of Goods Sold',
                extract_names=[
                    'cost of revenue',
                    'cost of goods sold',
                    'cogs',
                    'cor'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='trend',
                    pct_of='revenue'
                )
            ),
            pct_of_series=2009-12-31    3.239600e+10
2010-12-31    4.258800e+10
2011-12-31    6.013800e+10
2012-12-31    6.587500e+10
2013-12-31    5.565600e+10
2014-12-31    5.518400e+10
2015-12-31    4.701100e+10
2016-12-31    3.853700e+10
2017-12-31    4.546200e+10
2018-12-31    5.472200e+10
dtype: float64,
            pct_of_config=finstmt.items.config.ItemConfig(
                key='revenue',
                display_name='Revenue',
                extract_names=[
                    'total revenue',
                    'total rev',
                    'total sales',
                    'total sale',
                    'revenue',
                    'rev',
                    'sales',
                    'sale'
                ]
            )
        ),
        'rd_exp': finstmt.forecast.main.Forecast(
            orig_series=2009-12-31    1.421000e+09
2010-12-31    1.905000e+09
2011-12-31    2.297000e+09
2012-12-31    2.466000e+09
2013-12-31    2.046000e+09
2014-12-31    2.380000e+09
2015-12-31    2.119000e+09
2016-12-31    1.853000e+09
2017-12-31    1.842000e+09
2018-12-31    1.850000e+09
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC',
                balance=False
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='auto'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='rd_exp',
                display_name='R&D Expense',
                extract_names=[
                    'rd expenses',
                    'rd expense',
                    'rd exp',
                    'rd',
                    'research and development expenses',
                    'research and development expense',
                    'research and development exp',
                    'research and development'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='auto'
                )
            )
        ),
        'sga': finstmt.forecast.main.Forecast(
            orig_series=2009-12-31    3.645000e+09
2010-12-31    4.248000e+09
2011-12-31    5.203000e+09
2012-12-31    5.919000e+09
2013-12-31    5.547000e+09
2014-12-31    6.529000e+09
2015-12-31    4.951000e+09
2016-12-31    4.383000e+09
2017-12-31    4.999000e+09
2018-12-31    5.478000e+09
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC',
                balance=False
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(),
            base_config=finstmt.items.config.ItemConfig(
                key='sga',
                display_name='SG&A Expense',
                extract_names=[
                    'sga',
                    'sga expense',
                    'sga expenses',
                    'sga exp',
                    'selling general and administrative',
                    'selling general and administrative expense',
                    'selling general and administrative expenses',
                    'selling general and administrative exp',
                    'selling general administrative',
                    'selling general administrative expense',
                    'selling general administrative expenses',
                    'selling general administrative exp',
                    'selling general and admin',
                    'selling general and admin expense',
                    'selling general and admin expenses',
                    'selling general and admin exp',
                    'selling general admin',
                    'selling general admin expense',
                    'selling general admin expenses',
                    'selling general admin exp'
                ]
            )
        ),
        'int_exp': finstmt.forecast.main.Forecast(
            orig_series=2009-12-31    389000000.0
2010-12-31    343000000.0
2011-12-31    396000000.0
2012-12-31    467000000.0
2013-12-31    465000000.0
2014-12-31    484000000.0
2015-12-31    507000000.0
2016-12-31    505000000.0
2017-12-31    531000000.0
2018-12-31    404000000.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC',
                balance=False
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='mean',
                pct_of='total_debt'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='int_exp',
                display_name='Interest Expense',
                extract_names=[
                    'int',
                    'int expense',
                    'int expenses',
                    'int exp',
                    'interest',
                    'interest expense',
                    'interest expenses',
                    'interest exp'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='mean',
                    pct_of='total_debt'
                )
            ),
            pct_of_series=2009-12-31    3.163100e+10
2010-12-31    2.841800e+10
2011-12-31    3.459200e+10
2012-12-31    4.014300e+10
2013-12-31    3.775000e+10
2014-12-31    3.928500e+10
2015-12-31    3.801300e+10
2016-12-31    3.678300e+10
2017-12-31    3.487800e+10
2018-12-31    3.655300e+10
dtype: float64,
            pct_of_config=finstmt.items.config.ItemConfig(
                key='total_debt',
                display_name='Total Debt',
                extract_names=['total debt'],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    make_forecast=False
                ),
                expr_str='st_debt[t] + lt_debt[t]'
            )
        ),
        'tax_exp': finstmt.forecast.main.Forecast(
            orig_series=2009-12-31   -2.700000e+08
2010-12-31    9.680000e+08
2011-12-31    1.720000e+09
2012-12-31    2.528000e+09
2013-12-31    1.319000e+09
2014-12-31    6.920000e+08
2015-12-31    9.160000e+08
2016-12-31    1.920000e+08
2017-12-31    3.339000e+09
2018-12-31    1.698000e+09
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC',
                balance=False
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='mean',
                pct_of='ebt'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='tax_exp',
                display_name='Income Tax Expense',
                extract_names=[
                    'taxes',
                    'tax',
                    'tax provision',
                    'tax expense',
                    'tax expenses',
                    'tax exp',
                    'income tax',
                    'income tax provision',
                    'income tax expense',
                    'income tax expenses',
                    'income tax exp'
                ],
                force_positive=False,
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='mean',
                    pct_of='ebt'
                )
            ),
            pct_of_series=2009-12-31    6.250000e+08
2010-12-31    3.668000e+09
2011-12-31    6.648000e+09
2012-12-31    8.209000e+09
2013-12-31    5.108000e+09
2014-12-31    3.144000e+09
2015-12-31    3.428000e+09
2016-12-31    1.250000e+08
2017-12-31    4.093000e+09
2018-12-31    7.845000e+09
dtype: float64,
            pct_of_config=finstmt.items.config.ItemConfig(
                key='ebt',
                display_name='Earnings Before Tax',
                extract_names=[
                    'ebt',
                    'earnings before taxes',
                    'earnings before tax',
                    'earn before tax',
                    'earn before taxes',
                    'ebt including unusual items',
                    'earnings before taxes including unusual items',
                    'earnings before tax including unusual items',
                    'earn before tax including unusual items',
                    'earn before taxes including unusual items',
                    'ebt inc unusual items',
                    'earnings before taxes inc unusual items',
                    'earnings before tax inc unusual items',
                    'earn before tax inc unusual items',
                    'earn before taxes inc unusual items',
                    'ebt incl unusual items',
                    'earnings before taxes incl unusual items',
                    'earnings before tax incl unusual items',
                    'earn before tax incl unusual items',
                    'earn before taxes incl unusual items',
                    'pretax income',
                    'pre tax income',
                    'income pretax',
                    'income pre tax'
                ],
                force_positive=False,
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    make_forecast=False
                ),
                expr_str='ebit[t] - int_exp[t]'
            )
        ),
        'cash': finstmt.forecast.main.Forecast(
            orig_series=2009-12-31    4.867000e+09
2010-12-31    3.592000e+09
2011-12-31    3.057000e+09
2012-12-31    5.490000e+09
2013-12-31    6.081000e+09
2014-12-31    7.341000e+09
2015-12-31    6.460000e+09
2016-12-31    7.168000e+09
2017-12-31    8.261000e+09
2018-12-31    7.857000e+09
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC',
                balance=False
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='trend',
                plug=True
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='cash',
                display_name='Cash and Cash Equivalents',
                extract_names=[
                    'cash',
                    'cash and cash equivalents',
                    'cash and equivalents',
                    'cash and equiv',
                    'cash cash equivalents',
                    'cash equivalents',
                    'cash equiv'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='trend',
                    plug=True
                )
            )
        ),
        'receivables': finstmt.forecast.main.Forecast(
            orig_series=2009-12-31    2.716200e+10
2010-12-31    2.884900e+10
2011-12-31    3.080300e+10
2012-12-31    3.391100e+10
2013-12-31    3.349900e+10
2014-12-31    3.277200e+10
2015-12-31    3.050700e+10
2016-12-31    2.908800e+10
2017-12-31    3.072500e+10
2018-12-31    3.189900e+10
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC',
                balance=False
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='mean',
                pct_of='revenue'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='receivables',
                display_name='Receivables',
                extract_names=[
                    'receivables',
                    'rec',
                    'accounts receivable',
                    'ar'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='mean',
                    pct_of='revenue'
                )
            ),
            pct_of_series=2009-12-31    3.239600e+10
2010-12-31    4.258800e+10
2011-12-31    6.013800e+10
2012-12-31    6.587500e+10
2013-12-31    5.565600e+10
2014-12-31    5.518400e+10
2015-12-31    4.701100e+10
2016-12-31    3.853700e+10
2017-12-31    4.546200e+10
2018-12-31    5.472200e+10
dtype: float64,
            pct_of_config=finstmt.items.config.ItemConfig(
                key='revenue',
                display_name='Revenue',
                extract_names=[
                    'total revenue',
                    'total rev',
                    'total sales',
                    'total sale',
                    'revenue',
                    'rev',
                    'sales',
                    'sale'
                ]
            )
        ),
        'inventory': finstmt.forecast.main.Forecast(
            orig_series=2009-12-31    6.360000e+09
2010-12-31    9.587000e+09
2011-12-31    1.454400e+10
2012-12-31    1.554700e+10
2013-12-31    1.262500e+10
2014-12-31    1.220500e+10
2015-12-31    9.700000e+09
2016-12-31    8.614000e+09
2017-12-31    1.001800e+10
2018-12-31    1.152900e+10
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC',
                balance=False
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='trend',
                pct_of='revenue'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='inventory',
                display_name='Inventory',
                extract_names=['inv', 'inventory', 'inventories'],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='trend',
                    pct_of='revenue'
                )
            ),
            pct_of_series=2009-12-31    3.239600e+10
2010-12-31    4.258800e+10
2011-12-31    6.013800e+10
2012-12-31    6.587500e+10
2013-12-31    5.565600e+10
2014-12-31    5.518400e+10
2015-12-31    4.701100e+10
2016-12-31    3.853700e+10
2017-12-31    4.546200e+10
2018-12-31    5.472200e+10
dtype: float64,
            pct_of_config=finstmt.items.config.ItemConfig(
                key='revenue',
                display_name='Revenue',
                extract_names=[
                    'total revenue',
                    'total rev',
                    'total sales',
                    'total sale',
                    'revenue',
                    'rev',
                    'sales',
                    'sale'
                ]
            )
        ),
        'net_ppe': finstmt.forecast.main.Forecast(
            orig_series=2009-12-31    1.238600e+10
2010-12-31    1.253900e+10
2011-12-31    1.439500e+10
2012-12-31    1.646100e+10
2013-12-31    1.707500e+10
2014-12-31    1.657700e+10
2015-12-31    1.609000e+10
2016-12-31    1.532200e+10
2017-12-31    1.415500e+10
2018-12-31    1.357400e+10
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC',
                balance=False
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(),
            base_config=finstmt.items.config.ItemConfig(
                key='net_ppe',
                display_name='Net Property, Plant & Equipment',
                extract_names=[
                    'ppe',
                    'property plant equipment',
                    'property plant and equipment',
                    'ppe net',
                    'property plant equipment net',
                    'property plant and equipment net',
                    'net ppe',
                    'net property plant equipment',
                    'net property plant and equipment'
                ],
                expr_str='gross_ppe[t] - dep[t]'
            )
        ),
        'goodwill': finstmt.forecast.main.Forecast(
            orig_series=2009-12-31    2.734000e+09
2010-12-31    3.419000e+09
2011-12-31    1.144800e+10
2012-12-31    1.095800e+10
2013-12-31    1.055200e+10
2014-12-31    9.770000e+09
2015-12-31    9.436000e+09
2016-12-31    8.369000e+09
2017-12-31    8.311000e+09
2018-12-31    8.114000e+09
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC',
                balance=False
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='mean'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='goodwill',
                display_name='Goodwill and Intangible Assets',
                extract_names=[
                    'goodwill',
                    'goodwill and intangible assets',
                    'goodwill and intangibles',
                    'goodwill intangible assets',
                    'goodwill intangibles',
                    'goodwill total',
                    'goodwill and intangible assets total',
                    'goodwill and intangibles total',
                    'goodwill intangible assets total',
                    'goodwill intangibles total'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='mean'
                )
            )
        ),
        'lt_invest': finstmt.forecast.main.Forecast(
            orig_series=2009-12-31    105000000.0
2010-12-31    164000000.0
2011-12-31    133000000.0
2012-12-31    272000000.0
2013-12-31    272000000.0
2014-12-31    257000000.0
2015-12-31            0.0
2016-12-31            0.0
2017-12-31            0.0
2018-12-31            0.0
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC',
                balance=False
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='recent'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='lt_invest',
                display_name='Long-Term Investments',
                extract_names=[
                    'lt invest',
                    'lt investments',
                    'long term invest',
                    'long term investments',
                    'longterm invest',
                    'longterm investments'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='recent'
                )
            )
        ),
        'def_tax_lt': finstmt.forecast.main.Forecast(
            orig_series=2009-12-31    3.930000e+09
2010-12-31    3.424000e+09
2011-12-31    3.737000e+09
2012-12-31    3.558000e+09
2013-12-31    2.147000e+09
2014-12-31    3.143000e+09
2015-12-31    2.489000e+09
2016-12-31    2.790000e+09
2017-12-31    1.693000e+09
2018-12-31    1.439000e+09
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC',
                balance=False
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(),
            base_config=finstmt.items.config.ItemConfig(
                key='def_tax_lt',
                display_name='Deferred Tax Assets, Long-Term',
                extract_names=[
                    'def tax asset long term',
                    'deferred tax asset long term',
                    'tax asset long term',
                    'def tax assets long term',
                    'deferred tax assets long term',
                    'tax assets long term',
                    'def tax asset longterm',
                    'deferred tax asset longterm',
                    'tax asset longterm',
                    'def tax assets longterm',
                    'deferred tax assets longterm',
                    'tax assets longterm',
                    'def tax asset lt',
                    'deferred tax asset lt',
                    'tax asset lt',
                    'def tax assets lt',
                    'deferred tax assets lt',
                    'tax assets lt',
                    'def tax asset',
                    'deferred tax asset',
                    'tax asset',
                    'def tax assets',
                    'deferred tax assets',
                    'tax assets',
                    'long term assets tax deferred',
                    'lt assets tax deferred',
                    'lt assets tax def',
                    'long term assets tax def',
                    'long term assets deferred tax',
                    'lt assets deferred tax',
                    'lt assets def tax',
                    'long term assets def tax'
                ]
            )
        ),
        'payables': finstmt.forecast.main.Forecast(
            orig_series=2009-12-31    2.993000e+09
2010-12-31    5.856000e+09
2011-12-31    8.161000e+09
2012-12-31    6.753000e+09
2013-12-31    6.560000e+09
2014-12-31    6.515000e+09
2015-12-31    5.023000e+09
2016-12-31    4.614000e+09
2017-12-31    6.487000e+09
2018-12-31    7.051000e+09
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC',
                balance=False
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='trend',
                pct_of='revenue'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='payables',
                display_name='Payables',
                extract_names=[
                    'payables',
                    'accounts payable',
                    'ap',
                    'payables and accrued expenses',
                    'payables and accrued expense',
                    'payable and accrued expenses',
                    'payable and accrued expense',
                    'payables and acc expenses',
                    'payables and acc expense',
                    'payable and acc expenses',
                    'payable and acc expense',
                    'payables and accrued exps',
                    'payables and accrued exp',
                    'payable and accrued exps',
                    'payable and accrued exp',
                    'payables and acc exps',
                    'payables and acc exp',
                    'payable and acc exps',
                    'payable and acc exp'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='trend',
                    pct_of='revenue'
                )
            ),
            pct_of_series=2009-12-31    3.239600e+10
2010-12-31    4.258800e+10
2011-12-31    6.013800e+10
2012-12-31    6.587500e+10
2013-12-31    5.565600e+10
2014-12-31    5.518400e+10
2015-12-31    4.701100e+10
2016-12-31    3.853700e+10
2017-12-31    4.546200e+10
2018-12-31    5.472200e+10
dtype: float64,
            pct_of_config=finstmt.items.config.ItemConfig(
                key='revenue',
                display_name='Revenue',
                extract_names=[
                    'total revenue',
                    'total rev',
                    'total sales',
                    'total sale',
                    'revenue',
                    'rev',
                    'sales',
                    'sale'
                ]
            )
        ),
        'st_debt': finstmt.forecast.main.Forecast(
            orig_series=2009-12-31    9.784000e+09
2010-12-31    7.981000e+09
2011-12-31    9.648000e+09
2012-12-31    1.239100e+10
2013-12-31    1.103100e+10
2014-12-31    1.150100e+10
2015-12-31    1.284400e+10
2016-12-31    1.396500e+10
2017-12-31    1.103100e+10
2018-12-31    1.155300e+10
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC',
                balance=False
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                pct_of='total_debt'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='st_debt',
                display_name='Short-Term Debt',
                extract_names=[
                    'st debt',
                    'short term debt',
                    'shortterm debt',
                    'st borrow',
                    'short term borrow',
                    'shortterm borrowst borrowings',
                    'short term borrowings',
                    'shortterm borrowings'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    pct_of='total_debt'
                )
            ),
            pct_of_series=2009-12-31    3.163100e+10
2010-12-31    2.841800e+10
2011-12-31    3.459200e+10
2012-12-31    4.014300e+10
2013-12-31    3.775000e+10
2014-12-31    3.928500e+10
2015-12-31    3.801300e+10
2016-12-31    3.678300e+10
2017-12-31    3.487800e+10
2018-12-31    3.655300e+10
dtype: float64,
            pct_of_config=finstmt.items.config.ItemConfig(
                key='total_debt',
                display_name='Total Debt',
                extract_names=['total debt'],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    make_forecast=False
                ),
                expr_str='st_debt[t] + lt_debt[t]'
            )
        ),
        'lt_debt': finstmt.forecast.main.Forecast(
            orig_series=2009-12-31    2.184700e+10
2010-12-31    2.043700e+10
2011-12-31    2.494400e+10
2012-12-31    2.775200e+10
2013-12-31    2.671900e+10
2014-12-31    2.778400e+10
2015-12-31    2.516900e+10
2016-12-31    2.281800e+10
2017-12-31    2.384700e+10
2018-12-31    2.500000e+10
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC',
                balance=False
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(plug=True),
            base_config=finstmt.items.config.ItemConfig(
                key='lt_debt',
                display_name='Long-Term Debt',
                extract_names=[
                    'lt debt',
                    'long term debt',
                    'longterm debt',
                    'lt borrow',
                    'long term borrow',
                    'longterm borrow',
                    'lt borrowings',
                    'long term borrowings',
                    'longterm borrowings',
                    'lt debt total',
                    'long term debt total',
                    'longterm debt total',
                    'lt borrow total',
                    'long term borrow total',
                    'longterm borrow total',
                    'lt borrowings total',
                    'long term borrowings total',
                    'longterm borrowings total'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    plug=True
                )
            )
        ),
        'deposit_liab': finstmt.forecast.main.Forecast(
            orig_series=2009-12-31    1.217000e+09
2010-12-31    1.831000e+09
2011-12-31    2.487000e+09
2012-12-31    2.638000e+09
2013-12-31    2.360000e+09
2014-12-31    1.697000e+09
2015-12-31    1.146000e+09
2016-12-31    1.167000e+09
2017-12-31    1.426000e+09
2018-12-31    1.243000e+09
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC',
                balance=False
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='mean'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='deposit_liab',
                display_name='Deposit Liabilities',
                extract_names=[
                    'deposit liab',
                    'deposit liability',
                    'deposit liabilities'
                ],
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='mean'
                )
            )
        ),
        'other_income': finstmt.forecast.main.Forecast(
            orig_series=2009-12-31   -3.764000e+09
2010-12-31   -4.051000e+09
2011-12-31   -6.328000e+09
2012-12-31   -6.433000e+09
2013-12-31   -3.898000e+09
2014-12-31   -6.431000e+09
2015-12-31   -2.035000e+09
2016-12-31   -2.039000e+09
2017-12-31   -1.192000e+09
2018-12-31   -1.684000e+09
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC',
                balance=False
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(),
            base_config=finstmt.items.config.ItemConfig(
                key='other_income',
                display_name='Other Comprehensive Income',
                extract_names=[
                    'other income',
                    'other comprehensive income',
                    'other comp income',
                    'comp income',
                    'comprehensive income',
                    'comprehensive income and other',
                    'comp income and other',
                    'comp inc and other',
                    'comprehensive inc and other',
                    'comprehensive income other',
                    'comp income other',
                    'comp inc other',
                    'comprehensive inc other'
                ],
                force_positive=False
            )
        ),
        'retained_earnings': finstmt.forecast.main.Forecast(
            orig_series=2009-12-31    1.971100e+10
2010-12-31    2.138400e+10
2011-12-31    2.521900e+10
2012-12-31    2.955800e+10
2013-12-31    3.185400e+10
2014-12-31    3.388700e+10
2015-12-31    2.924600e+10
2016-12-31    2.737700e+10
2017-12-31    2.630100e+10
2018-12-31    3.042700e+10
dtype: float64,
            config=finstmt.forecast.config.ForecastConfig(
                periods=2,
                freq='A-DEC',
                balance=False
            ),
            item_config=finstmt.forecast.config.ForecastItemConfig(
                method='trend'
            ),
            base_config=finstmt.items.config.ItemConfig(
                key='retained_earnings',
                display_name='Retained Earnings',
                extract_names=[
                    're',
                    'retained earnings',
                    'retained earnings deficit',
                    're deficit'
                ],
                force_positive=False,
                forecast_config=finstmt.forecast.config.ForecastItemConfig(
                    method='trend'
                )
            )
        )
    }
)
'''